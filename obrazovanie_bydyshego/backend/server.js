const express = require("express");
const cors = require("cors");
const mongoose = require("mongoose");

const app = express();
const PORT = 3000;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas
// –ó–∞–º–µ–Ω–∏—Ç–µ <username> –∏ <password> –Ω–∞ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB Atlas
// –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: First_project
const mongoURI = "mongodb+srv://sazonovad79_db_user:x7z08nnP9c69WypZ@edubridge.8rq6zbr.mongodb.net/";

// –î–æ–±–∞–≤—å—Ç–µ IP 5.34.112.245/32 –≤ Network Access –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö MongoDB Atlas
mongoose.connect(mongoURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log("MongoDB Atlas –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ ‚úÖ"))
.catch(err => console.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas:", err));

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–ª—è –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏)
const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true },
  course: { type: String, required: true },
  question: { type: String, required: true }
});

const User = mongoose.model("User", userSchema);

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –¢–æ—á–∫–∞ –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–æ–∫ —Å —Ñ–æ—Ä–º—ã
app.post("/api/contact", async (req, res) => {
  const { name, email, course, question } = req.body;

  if (!name || !email || !course || !question) {
    return res.status(400).json({ success: false, message: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è" });
  }

  try {
    const newUser = new User({ name, email, course, question });
    await newUser.save();

    console.log("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ MongoDB:");
    console.log("–ò–º—è:", name);
    console.log("Email:", email);
    console.log("–ö—É—Ä—Å:", course);
    console.log("–í–æ–ø—Ä–æ—Å:", question);

    res.json({ success: true, message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", err);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get("/", (req, res) => {
  res.send("–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ");
});

// –ó–∞–ø—É—Å–∫
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
});